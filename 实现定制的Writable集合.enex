<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE en-export SYSTEM "http://xml.evernote.com/pub/evernote-export3.dtd">
<en-export export-date="20190713T134919Z" application="Evernote" version="Evernote Mac 6.13.1 (455786)">
<note><title>实现定制的Writable集合</title><content><![CDATA[<!DOCTYPE en-note SYSTEM "http://xml.evernote.com/pub/enml2.dtd"><en-note><div><font face="Courier New" style="font-size: 14px;">1.TextPair.java文件</font></div><div><font face="Courier New" style="font-size: 14px;">import java.io.*;</font></div><div><font face="Courier New" style="font-size: 14px;">import org.apache.hadoop.io.*;</font></div><div><font face="Courier New" style="font-size: 14px;"><br /></font></div><div><font face="Courier New" style="font-size: 14px;">public class TextPair implements WritableComparable&lt;TextPair&gt; {</font></div><div><font face="Courier New" style="font-size: 14px;">    private Text first;</font></div><div><font face="Courier New" style="font-size: 14px;">    private Text second;</font></div><div><font face="Courier New" style="font-size: 14px;"><br /></font></div><div><font face="Courier New" style="font-size: 14px;">    public TextPair(){</font></div><div><font face="Courier New" style="font-size: 14px;">        set(new Text(), new Text());</font></div><div><font face="Courier New" style="font-size: 14px;">    }</font></div><div><font face="Courier New" style="font-size: 14px;"><br /></font></div><div><font face="Courier New" style="font-size: 14px;">    public TextPair(String first, String second){</font></div><div><font face="Courier New" style="font-size: 14px;">        set(new Text(first), new Text(second));</font></div><div><font face="Courier New" style="font-size: 14px;">    }</font></div><div><font face="Courier New" style="font-size: 14px;"><br /></font></div><div><font face="Courier New" style="font-size: 14px;">    public TextPair(Text first, Text second){</font></div><div><font face="Courier New" style="font-size: 14px;">        set(first, second);</font></div><div><font face="Courier New" style="font-size: 14px;">    }</font></div><div><font face="Courier New" style="font-size: 14px;"><br /></font></div><div><font face="Courier New" style="font-size: 14px;">    public void set(Text first, Text second){</font></div><div><font face="Courier New" style="font-size: 14px;">        this.first = first;</font></div><div><font face="Courier New" style="font-size: 14px;">        this.second = second;</font></div><div><font face="Courier New" style="font-size: 14px;">    }</font></div><div><font face="Courier New" style="font-size: 14px;"><br /></font></div><div><font face="Courier New" style="font-size: 14px;">    public Text getFirst(){</font></div><div><font face="Courier New" style="font-size: 14px;">        return first;</font></div><div><font face="Courier New" style="font-size: 14px;">    }</font></div><div><font face="Courier New" style="font-size: 14px;"><br /></font></div><div><font face="Courier New" style="font-size: 14px;">    public Text getSecond(){</font></div><div><font face="Courier New" style="font-size: 14px;">        return second;</font></div><div><font face="Courier New" style="font-size: 14px;">    }</font></div><div><font face="Courier New" style="font-size: 14px;"><br /></font></div><div><font face="Courier New" style="font-size: 14px;">    @Override</font></div><div><font face="Courier New" style="font-size: 14px;">    public void write(DataOutput out) throws IOException{</font></div><div><font face="Courier New" style="font-size: 14px;">        first.write(out);</font></div><div><font face="Courier New" style="font-size: 14px;">        second.write(out);</font></div><div><font face="Courier New" style="font-size: 14px;">    }</font></div><div><font face="Courier New" style="font-size: 14px;"><br /></font></div><div><font face="Courier New" style="font-size: 14px;">    @Override</font></div><div><font face="Courier New" style="font-size: 14px;">    public void readFields(DataInput in) throws IOException{</font></div><div><font face="Courier New" style="font-size: 14px;">        first.readFields(in);</font></div><div><font face="Courier New" style="font-size: 14px;">        second.readFields(in);</font></div><div><font face="Courier New" style="font-size: 14px;">    }</font></div><div><font face="Courier New" style="font-size: 14px;"><br /></font></div><div><font face="Courier New" style="font-size: 14px;">    @Override</font></div><div><font face="Courier New" style="font-size: 14px;">    public int hashCode(){</font></div><div><font face="Courier New" style="font-size: 14px;">        return first.hashCode() * 163 + second.hashCode();</font></div><div><font face="Courier New" style="font-size: 14px;">    }</font></div><div><font face="Courier New" style="font-size: 14px;"><br /></font></div><div><font face="Courier New" style="font-size: 14px;">    @Override</font></div><div><font face="Courier New" style="font-size: 14px;">    public boolean equals(Object o){</font></div><div><font face="Courier New" style="font-size: 14px;">        if(o instanceof TextPair){</font></div><div><font face="Courier New" style="font-size: 14px;">            TextPair tp = (TextPair) o;</font></div><div><font face="Courier New" style="font-size: 14px;">            return first.equals(tp.first) &amp;&amp; second.equals(tp.second);</font></div><div><font face="Courier New" style="font-size: 14px;">        }</font></div><div><font face="Courier New" style="font-size: 14px;">        return false;</font></div><div><font face="Courier New" style="font-size: 14px;">    }</font></div><div><font face="Courier New" style="font-size: 14px;"><br /></font></div><div><font face="Courier New" style="font-size: 14px;">    @Override</font></div><div><font face="Courier New" style="font-size: 14px;">    public String toString(){</font></div><div><font face="Courier New" style="font-size: 14px;">        return first + "\t" + second;</font></div><div><font face="Courier New" style="font-size: 14px;">    }</font></div><div><font face="Courier New" style="font-size: 14px;"><br /></font></div><div><font face="Courier New" style="font-size: 14px;">    @Override</font></div><div><font face="Courier New" style="font-size: 14px;">    public int compareTo(TextPair tp){</font></div><div><font face="Courier New" style="font-size: 14px;">        int cmp = first.compareTo(tp.first);</font></div><div><font face="Courier New" style="font-size: 14px;">        if(cmp != 0){</font></div><div><font face="Courier New" style="font-size: 14px;">            return cmp;</font></div><div><font face="Courier New" style="font-size: 14px;">        }</font></div><div><font face="Courier New" style="font-size: 14px;">        return second.compareTo(tp.second);</font></div><div><font face="Courier New" style="font-size: 14px;">    }</font></div><div><font face="Courier New" style="font-size: 14px;"><span>    </span>// ^^ <span style="">当TextPair被用作MapReduce中的键时，需要将数据流<font color="#ff2600">反序列化为对象</font>，然后再<font color="#ff2600">调用compareTo()</font>方法进行</span></font></div><div><font face="Courier New" style="font-size: 14px;"><span style=""><span>    <span style="font-family: Courier New;">比较。那么有没有可能</span><span style="color: rgb(255, 38, 0); font-family: Courier New;">看看它们的序列化表示就可以比较两个TextPair对象</span><span style="font-family: Courier New;">呢？</span></span></span></font></div><div><font face="Courier New" style="font-size: 14px;"><span>    </span>// ^^ <span style="box-sizing: border-box; outline: 0px; color: rgb(77, 77, 77); line-height: 26px; overflow-x: auto; overflow-wrap: break-word; font-variant-ligatures: normal; font-variant-caps: normal; letter-spacing: normal; orphans: 2; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px;">b1:第一个对象所在字节数组</span></font></div><div style="direction: inherit; "><span style="font-size: 14px; font-family: 'Courier New'; color: rgb(77, 77, 77); orphans: 2; widows: 2;"><span>    </span>s1:该对象在b1中的起始位置</span></div><div style="direction: inherit; "><span style="font-size: 14px; font-family: 'Courier New'; color: rgb(77, 77, 77); orphans: 2; widows: 2;"><span>    </span>l1:该对象在b1中的长度</span></div><div style="direction: inherit; "><span style="font-size: 14px; font-family: 'Courier New'; color: rgb(77, 77, 77); orphans: 2; widows: 2;"><span>    </span>b2:第二个对象所在字节数组</span></div><div style="direction: inherit; "><span style="font-size: 14px; font-family: 'Courier New'; color: rgb(77, 77, 77); orphans: 2; widows: 2;"><span>    </span>s2:该对象在b2的起始位置</span></div><div style="direction: inherit; "><span style="font-size: 14px; font-family: 'Courier New'; color: rgb(77, 77, 77); orphans: 2; widows: 2;"><span>    </span>l2:该对象在b2中的长度</span></div><div><font face="Courier New" style="font-size: 14px;">    public static class Comparator extends WritableComparator{</font></div><div><font face="Courier New" style="font-size: 14px;">        private static final Text.Comparator TEXT_COMPARATOR = new Text.Comparator();</font></div><div><font face="Courier New" style="font-size: 14px;"><br /></font></div><div><font face="Courier New" style="font-size: 14px;">        public Comparator(){</font></div><div><font face="Courier New" style="font-size: 14px;">            super(TextPair.class);</font></div><div><font face="Courier New" style="font-size: 14px;">        }</font></div><div><font face="Courier New" style="font-size: 14px;"><br /></font></div><div><font face="Courier New" style="font-size: 14px;">        @Override</font></div><div><font face="Courier New" style="font-size: 14px;">        public int compare(byte[] b1, int s1, int l1,</font></div><div><font face="Courier New" style="font-size: 14px;">                            byte[] b2, int s2, int l2){</font></div><div><font face="Courier New" style="font-size: 14px;">            try{</font></div><div><font face="Courier New" style="font-size: 14px;">                <font color="#ff2600">int firstL1 = WritableUtils.decodeVIntSize(b1[s1]) + readVInt(b1, s1)</font>;</font></div><div><font face="Courier New" style="font-size: 14px;">                int firstL2 = WritableUtils.decodeVIntSize(b2[s2]) + readVInt(b2, s2);</font></div><div><font face="Courier New" style="font-size: 14px;"><br /></font></div><div><font face="Courier New" style="font-size: 14px;">                int cmp = TEXT_COMPARATOR.compare(b1, s1, firstL1, b2, s2, firstL2);</font></div><div><font face="Courier New" style="font-size: 14px;">                if(cmp != 0){</font></div><div><font face="Courier New" style="font-size: 14px;">                    return cmp;</font></div><div><font face="Courier New" style="font-size: 14px;">                }</font></div><div><font face="Courier New" style="font-size: 14px;">                return TEXT_COMPARATOR.compare(b1, s1+firstL1, l1-firstL1, b2, s2+firstL2, l2-firstL2);</font></div><div><font face="Courier New" style="font-size: 14px;">            }catch(IOException e){</font></div><div><font face="Courier New" style="font-size: 14px;">                throw new IllegalArgumentException(e);</font></div><div><font face="Courier New" style="font-size: 14px;">            }</font></div><div><font face="Courier New" style="font-size: 14px;">        }</font></div><div><font face="Courier New" style="font-size: 14px;">    }</font></div><div><font face="Courier New" style="font-size: 14px;"><br /></font></div><div><font face="Courier New" style="font-size: 14px;">    static{</font></div><div><font face="Courier New" style="font-size: 14px;">        WritableComparator.define(TextPair.class, new Comparator());</font></div><div><font face="Courier New" style="font-size: 14px;">    }</font></div><div><font face="Courier New" style="font-size: 14px;"><br /></font></div><div><font face="Courier New" style="font-size: 14px;">    public static class FirstComparator extends WritableComparator{</font></div><div><font face="Courier New" style="font-size: 14px;">        private static final Text.Comparator TEXT_COMPARATOR = new Text.Comparator();</font></div><div><font face="Courier New" style="font-size: 14px;"><br /></font></div><div><font face="Courier New" style="font-size: 14px;">        public FirstComparator(){</font></div><div><font face="Courier New" style="font-size: 14px;">            super(TextPair.class);</font></div><div><font face="Courier New" style="font-size: 14px;">        }</font></div><div><font face="Courier New" style="font-size: 14px;"><br /></font></div><div><font face="Courier New" style="font-size: 14px;">        @Override</font></div><div><font face="Courier New" style="font-size: 14px;">        public int compare(byte[] b1, int s1, int l1, byte[] b2, int s2, int l2){</font></div><div><font face="Courier New" style="font-size: 14px;">            try{</font></div><div><font face="Courier New" style="font-size: 14px;">                int firstL1 = WritableUtils.decodeVIntSize(b1[s1]) + readVInt(b1, s1);</font></div><div><font face="Courier New" style="font-size: 14px;">                int firstL2 = WritableUtils.decodeVIntSize(b1[s2]) + readVInt(b2, s2);</font></div><div><font face="Courier New" style="font-size: 14px;">                return TEXT_COMPARATOR.compare(b1, s1, firstL1, b2, s2, firstL2);</font></div><div><font face="Courier New" style="font-size: 14px;">            }catch(IOException e){</font></div><div><font face="Courier New" style="font-size: 14px;">                throw new IllegalArgumentException(e);</font></div><div><font face="Courier New" style="font-size: 14px;">            }</font></div><div><font face="Courier New" style="font-size: 14px;">        }</font></div><div><font face="Courier New" style="font-size: 14px;"><br /></font></div><div><font face="Courier New" style="font-size: 14px;">        @Override</font></div><div><font face="Courier New" style="font-size: 14px;">        public int compare(WritableComparable a, WritableComparable b){</font></div><div><font face="Courier New" style="font-size: 14px;">            if(a instanceof TextPair &amp;&amp; b instanceof TextPair){</font></div><div><font face="Courier New" style="font-size: 14px;">                return ((TextPair) a).first.compareTo(((TextPair) b).first);</font></div><div><font face="Courier New" style="font-size: 14px;">            }</font></div><div><font face="Courier New" style="font-size: 14px;">            return super.compare(a, b);</font></div><div><font face="Courier New" style="font-size: 14px;">        }</font></div><div><font face="Courier New" style="font-size: 14px;">    }</font></div><div><font face="Courier New" style="font-size: 14px;">}</font></div></en-note>]]></content><created>20190713T054054Z</created><updated>20190713T070816Z</updated><note-attributes><latitude>34.21897867304833</latitude><longitude>108.8889112178014</longitude><altitude>410.5372619628906</altitude><author>hqh41@outlook.com</author><source>desktop.mac</source><reminder-order>0</reminder-order></note-attributes></note>
</en-export>
